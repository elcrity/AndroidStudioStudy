import kotlin.math.PI
import kotlin.math.sqrt

fun main() {
    val squareCabin = SquareCabin(6, 50.0)
    val roundHut = RoundHut(3, 10.0)
    val roundTower = RoundTower(4, 15.5)

    with(squareCabin){//해당 인스턴스로 모두 실행
        println("\nSquare Cabin\n======")
        println("Capacity: ${capacity}")//squareCabin.capacity
        println("Material: ${buildingMaterial}")//squareCabin.buildingMaterial
        println("Has room? ${hasRoom()}")//squareCabin.hasRoom()
        println("Floor area: ${floorArea()}")
    }

    with(roundHut){
        println("\nRound Hut\n======")
        println("Capacity: ${capacity}")
        println("Material: ${buildingMaterial}")
        println("Has room? ${hasRoom()}")
        getRoom()
        println("Has room? ${hasRoom()}")
        getRoom()
        println("Floor area: ${floorArea()}")
        println("Carpet Length: ${calculateMaxCarpetLength()}")
    }

    with(roundTower){
        println("\nRound Tower\n======")
    println("Material: ${buildingMaterial}")
    println("Capacity: ${capacity}")
    println("Has room? ${hasRoom()}")
    println("Floor area: ${floorArea()}")
    println("Carpet Length: ${calculateMaxCarpetLength()}")
    }
}

abstract class Dwelling(private var residents : Int){
    abstract val buildingMaterial : String
    abstract val capacity : Int

    fun hasRoom(): Boolean{
        return capacity > residents
    }

    abstract fun floorArea(): Double

    fun getRoom(){
        if(capacity>residents){
            residents++
            println("증가")
        }else{
            println("빈방 없음")
        }
    }
}

class SquareCabin(residents : Int, val length : Double) : Dwelling(residents){
    override val buildingMaterial = "Wood"//상위 클래스에서 정의된 변수, 오버라이드로 재정의
    override val capacity = 6
    override fun floorArea(): Double {
        return length*length
    }
}
/*코틀린에서 클래스는 최종클래스이며 서브클래스,
 abstract나 open키워드로 표시된 클래스만 상속 가능 */
open class RoundHut(residents: Int,  val radius: Double) : Dwelling(residents){
    override val buildingMaterial  = "Straw"
    override val capacity = 4
    override fun floorArea(): Double {
        return PI * radius * radius
    }

    fun calculateMaxCarpetLength():Double {
        return sqrt(2.0) * radius
    }
}

class RoundTower(residents: Int, radius: Double, val floors: Int = 2) : RoundHut(residents, radius){
    override val buildingMaterial = "Stone"
    override val capacity = 4 * floors
    override fun floorArea(): Double {
        return super.floorArea() * floors
    }
}
